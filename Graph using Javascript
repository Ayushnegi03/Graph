//Graph
class Graph 
{
    constructor(NoOfVertices)
    {
        this.NoOfVertices = NoOfVertices;
        this.AdjList = new Map();
    }
    addVertex(V)
    {
    this.AdjList.set(V, []);
    }
    addEdge(V, W)
{
    this.AdjList.get(V).push(W);
    this.AdjList.get(W).push(V);
}
printGraph()
{
    var get_keys = this.AdjList.keys();
    console.log("Graph:");
    for (var i of get_keys)
{
        var get_values = this.AdjList.get(i);
        var conc = "";       
        for (var j of get_values)
            conc += j + " ";
        console.log(i + " -> " + conc);
    }
}
}
var g = new Graph(6);
var vertices = [ 'A', 'B', 'C', 'D', 'E', 'F','G' ];
for (var i = 0; i < vertices.length; i++) {
    g.addVertex(vertices[i]);
}
g.addEdge('A', 'B');
g.addEdge('A', 'D');
g.addEdge('A', 'E');
g.addEdge('B', 'C');
g.addEdge('B', 'E');
g.addEdge('D', 'E');
g.addEdge('E', 'F');
g.addEdge('E', 'C');
g.addEdge('C', 'F');
g.addEdge('D', 'F');
g.addEdge('F', 'A');
g.addEdge('G', 'E');
g.addEdge('G', 'D');
g.printGraph();
//Output-
//Graph:
//A -> B D E F 
//B -> A C E
//C -> B E F
//D -> A E F G
//E -> A B D F C G
//F -> E C D A
//G -> E D
  
 
